#!/usr/bin/env bash

# Dependency check
check_dependency() {
    if ! command -v $1 &>/dev/null; then
        echo "‚ùå $1 not found! Please install it first."
        exit 1
    fi
}

check_dependencies() {
    check_dependency "clang-format"
    check_dependency "clang-tidy"
    check_dependency "cmake"
    check_dependency "git"
}

get_user_input() {
    read -p "üìÇ Project name (snake_case recommended): " project_name
    [[ -z "$project_name" ]] && {
        echo "‚ùå Project name cannot be empty!"
        exit 1
    }

    project_name_snake=$(echo "$project_name" | tr '[:upper:]' '[:lower:]' | tr ' ' '_')
    project_name_upper=$(echo "$project_name_snake" | tr '[:lower:]' '[:upper:]')

    read -p "üåê GitHub repository URL (press enter for default): " github_url
    github_url=${github_url:-"https://github.com/$(git config --get user.name)/${project_name_snake}"}

    read -p "‚öôÔ∏è  C++ Standard (14/17/20/23) [20]: " cpp_version
    cpp_version=${cpp_version:-20}

    read -p "‚öôÔ∏è  Minimum CMake version [3.25]: " cmake_version
    cmake_version=${cmake_version:-3.25}

    read -p "üìú License type (MIT/Apache-2.0/BSD-3-Clause) [MIT]: " license_type
    license_type=${license_type:-MIT}
}

create_project_structure() {
    mkdir -p "${project_name_snake}" || exit 1
    cd "${project_name_snake}" || exit 1

    echo "üöÄ Creating project structure for '$project_name'..."

    local dirs=(
        ".github/workflows"
        "cmake"
        "$project_name_snake/include/$project_name_snake"
        "$project_name_snake/src"
        "tests"
        "docs"
    )

    local files=(
        "CMakeLists.txt"
        "cmake/Dependencies.cmake"
        "cmake/CompilerWarnings.cmake"
        "cmake/StaticAnalysis.cmake"
        "$project_name_snake/include/$project_name_snake/demo.h"
        "$project_name_snake/src/demo.cpp"
        "$project_name_snake/CMakeLists.txt"
        "tests/test_demo.cpp"
        "tests/CMakeLists.txt"
        ".github/workflows/ci.yml"
        ".gitignore"
        ".clang-tidy"
        "LICENSE"
        "README.md"
    )

    for dir in "${dirs[@]}"; do
        mkdir -p "$dir" && echo "  üìÅ Created directory: $dir"
    done

    for file in "${files[@]}"; do
        touch "$file" && echo "  üìÑ Created file: $file"
    done
}

generate_license() {
    case $license_type in
    MIT)
        cat <<EOF >LICENSE
MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
EOF
        ;;
    Apache-2.0)
        curl -s https://www.apache.org/licenses/LICENSE-2.0.txt >LICENSE
        ;;
    BSD-3-Clause)
        cat <<EOF >LICENSE
BSD 3-Clause License

Copyright (c) [year], [fullname]

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
...
EOF
        ;;
    esac

    sed -i "s/\[year\]/$(date +%Y)/" LICENSE
    sed -i "s/\[fullname\]/$(git config --get user.name)/" LICENSE
}

generate_root_cmake() {
    # Generate root CMakeLists.txt
    cat <<EOF >CMakeLists.txt
cmake_minimum_required(VERSION ${cmake_version})

project(
    ${project_name_snake}
    VERSION 0.1.0
    DESCRIPTION "Modern C++ project template"
    HOMEPAGE_URL "${github_url}"
    LANGUAGES CXX
)

# Core configuration
set(CMAKE_CXX_STANDARD ${cpp_version})
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Build directory guard
if(PROJECT_BINARY_DIR STREQUAL PROJECT_SOURCE_DIR)
    message(FATAL_ERROR "In-source builds not allowed. Use: cmake -B build")
endif()

# Project options
option(${project_name_upper}_ENABLE_WARNING "Enable warnings" ON)
option(${project_name_upper}_BUILD_TESTS "Build test suite" ON)
option(${project_name_upper}_ENABLE_CLANG_TIDY "Enable clang-tidy" ON)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

message(STATUS "Project: \${PROJECT_NAME} (v\${PROJECT_VERSION})")
message(STATUS "Compiler: \${CMAKE_CXX_COMPILER_ID} (\${CMAKE_CXX_COMPILER})")
message(STATUS "C++ standard: C++\${CMAKE_CXX_STANDARD}")

# Include CMake modules
list(APPEND CMAKE_MODULE_PATH "\${CMAKE_CURRENT_SOURCE_DIR}/cmake")
include(Dependencies)

add_subdirectory($project_name_snake)

if(${project_name_upper}_ENABLE_WARNING)
    include(CompilerWarnings)
endif()

if(${project_name_upper}_BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

if(${project_name_upper}_ENABLE_CLANG_TIDY)
    include(StaticAnalysis)
endif()
EOF
}

generate_project_cmake() {
    cat <<EOF >"$project_name_snake/CMakeLists.txt"
file(GLOB_RECURSE ${project_name_upper}_SRC CONFIGURE_DEPENDS src/*.cpp)

add_library($project_name_snake STATIC)
target_sources($project_name_snake PRIVATE \${${project_name_upper}_SRC})
target_include_directories($project_name_snake PUBLIC \${CMAKE_CURRENT_SOURCE_DIR}/include)
EOF
}

generate_test_cmake() {
    # Write test CMakeLists.txt
    cat <<EOF >tests/CMakeLists.txt
include(FetchContent)

# Download google-test
FetchContent_Declare(
    googletest
    GIT_REPOSITORY "https://github.com/google/googletest"
    GIT_TAG "6910c9d9165801d8827d628cb72eb7ea9dd538c5"
)
FetchContent_MakeAvailable(googletest)

# Test executables
file(GLOB TEST_SOURCES CONFIGURE_DEPENDS *.cpp)
add_executable(test_runner \${TEST_SOURCES})

target_link_libraries(test_runner PRIVATE GTest::gtest_main $project_name_snake)
include(GoogleTest)
gtest_discover_tests(test_runner)
EOF

}

generate_module_cmake() {
    # Write dependencies cmake
    cat <<EOF >cmake/Dependencies.cmake
include(FetchContent)

FetchContent_Declare(
    fmt
    GIT_REPOSITORY https://github.com/fmtlib/fmt
    GIT_TAG e69e5f977d458f2650bb346dadf2ad30c5320281
) # 10.2.1
FetchContent_MakeAvailable(fmt)
EOF

    # Write compiler warning cmake
    cat <<EOF >cmake/CompilerWarnings.cmake
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    message(STATUS "Enabling strict compiler warnings")
    add_compile_options(
        -Wall
        -Wextra
        -Wpedantic
        -Wconversion
        -Wsign-conversion
        -Wshadow
        -Wnon-virtual-dtor
        -Wold-style-cast
        -Wcast-align
        -Wunused
        -Woverloaded-virtual
        -Wdouble-promotion
        -Wformat=2
        -Wno-unused-parameter
        -Werror=uninitialized
        -Werror=return-type
        -Wsign-compare
        -Werror=unused-result
        -Werror=suggest-override
        -Wzero-as-null-pointer-constant
        -Wnon-virtual-dtor
    )
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    message(STATUS "Enabling strict compiler warnings for MSVC")
    add_compile_options(
        /W4
        /WX
        /wd4201 # Suppress nonstandard extension used: nameless struct/union
        /wd4127 # Suppress conditional expression is constant
    )
else()
    message(WARNING "Compiler warnings not configured for this compiler.")
endif()
EOF

    # Write static analysis cmake
    cat <<EOF >cmake/StaticAnalysis.cmake
# StaticAnalysis.cmake - Enable static analysis tools

# clang-tidy
find_program(CLANG_TIDY_PATH clang-tidy)
if(NOT CLANG_TIDY_PATH)
    message(WARNING "clang-tidy not found. Disabling static analysis.")
    return()
endif()

# Configure clang-tidy
set(CMAKE_CXX_CLANG_TIDY
    \${CLANG_TIDY_PATH}
    -extra-arg=-std=c++\${CMAKE_CXX_STANDARD}
    -config=\${CMAKE_SOURCE_DIR}/.clang-tidy
)

message(STATUS "Enabled clang-tidy for static analysis")

# cppcheck
find_program(CPPCHECK_PATH cppcheck)
if(NOT CPPCHECK_PATH)
    message(WARNING "cppcheck not found. Disabling static analysis.")
    return()
endif()
if(CPPCHECK_PATH)
    set(CMAKE_CXX_CPPCHECK
        \${CPPCHECK_PATH}
        --enable=all
        --suppress=missingIncludeSystem
        --inline-suppr
        --std=c++\${CMAKE_CXX_STANDARD}
    )
    message(STATUS "Enabled cppcheck for static analysis")
endif()
EOF
}

generate_miscs() {
    git init &>/dev/null
    clang-format --style=Google -dump-config >.clang-format

    cat <<EOF >.clang-tidy
Checks: '-*,clang-analyzer-*,modernize-*,performance-*,readability-*,bugprone-*,-modernize-use-trailing-return-type,-readability-identifier-length'
WarningsAsErrors: '*'
HeaderFilterRegex: '.*'
FormatStyle: file
EOF
    # Generate CI configuration
    cat <<EOF >.github/workflows/ci.yml
name: Modern C++ CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug
    - name: Build
      run: cmake --build build
    - name: Run tests
      run: ctest --test-dir build --output-on-failure
EOF

    # Generate README.md
    cat <<EOF >README.md
# $project_name_upper
EOF

    # Generate .gitignore
    cat <<EOF >.gitignore
# Build directories
/build/
/bin/
/lib/
/out/
/CMakeFiles/
/CMakeCache.txt
/cmake_install.cmake
/Makefile

# IDE and editor specific files
*.swp
*.swo
*.swn
*.idea/
.vscode/
*.code-workspace

# Generated files
*.o
*.obj
*.so
*.a
*.lib
*.dll
*.exe
*.dSYM/
*.pdb
*.pch
*.ilk

# Logs and temporary files
*.log
*.tmp
*.bak
*.cache

# CTest related files
/Testing/
CTestTestfile.cmake

# CLion specific
cmake-build-*/

# Conan and vcpkg
conanbuildinfo.*
conan.lock
vcpkg_installed/
vcpkg.buildinfo
EOF
}

init_project() {
    check_dependencies
    get_user_input
    create_project_structure
    generate_root_cmake
    generate_project_cmake
    generate_test_cmake
    generate_module_cmake
    generate_miscs

    echo "‚úÖ Project created successfully!"
    echo "üìÅ Next steps:"
    echo "   cd ${project_name_snake}"
    echo "   cmake -B build && cmake --build build"
}

show_help() {
    echo "Usage: $0 {init|build|release|test|install}"
    echo "Commands:"
    echo "  init      Initialize project"
    echo "  config    Config debug or release build"
    echo "  build     Build the project"
    echo "  test      Run tests"
    echo "  install   Install the project"
    echo "  -v        Show script version"
    echo "  --help    Show this help message"
    exit 0
}

show_version() {
    echo "icpp v1.0"
    exit 0
}

check_cmake_project() {
    if [ ! -f "CMakeLists.txt" ]; then
        echo "‚ùå Not a CMake project! Please run 'icpp init' first."
        exit 1
    fi
}

delete_cmake_cache() {
    if [ -f "build/CMakeCache.txt" ]; then
        rm -f build/CMakeCache.txt
    fi
}

config_debug() {
    check_cmake_project
    delete_cmake_cache
    if [ -f "build/CMakeCache.txt" ]; then
        rm -f build/CMakeCache.txt
    fi
    cmake -G $cmake_generator -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
}

config_release() {
    check_cmake_project
    delete_cmake_cache

    cmake -G $cmake_generator -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
}

config() {
    if [ "$1" == "debug" ]; then
        build_type=Debug
    elif [[ "$1" == "release" ]]; then
        build_type=Release
    else
        read -p "‚öôÔ∏è  Build type (Debug/Release) [Debug]: " build_type
        build_type=${build_type:-Debug}
    fi

    read -p "‚öôÔ∏è  Generator (Ninja/Unix Makefiles) [Ninja]: " cmake_generator
    cmake_generator=${cmake_generator:-Ninja}

    if [ "$build_type" == "Debug" ]; then
        config_debug
    else
        config_release
    fi
}

check_cmake_cache() {
    if [ ! -f "build/CMakeCache.txt" ]; then
        echo "‚ùå Build directory exists. Please run 'icpp debug' or 'icpp release' first."
        exit 1
    fi
}

build() {
    check_cmake_project
    check_cmake_cache

    cmake --build build
}

run_tests() {
    check_cmake_project
    check_cmake_cache

    cmake --build build
    cd build
    ctest
    cd ..
}

install() {
    check_cmake_project

    if [ -f "build/CMakeCache.txt" ]; then
        echo "‚ùå Build directory exists. Please run 'icpp debug' or 'icpp release' first."
        exit 1
    fi

    cmake --build build --target install
}

case "$1" in
init)
    init_project
    ;;
config)
    config $2
    ;;
build)
    build
    ;;
test)
    run_tests
    ;;
install)
    install
    ;;
-v)
    show_version
    ;;
--help)
    show_help
    ;;
*)
    echo "‚ùå Unknown command: $1"
    show_help
    ;;
esac
